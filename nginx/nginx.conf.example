# nginx configuration for Ora2Pg Corrector
# Place this in /etc/nginx/sites-available/ora2pg-corrector

upstream ora2pg_app {
    server 127.0.0.1:8000;  # For local deployment
    # server app:8000;      # For Docker Compose (service name: app)
}

server {
    listen 80;
    server_name your-domain.com;  # Change to your domain
    
    # Redirect HTTP to HTTPS (uncomment when SSL is configured)
    # return 301 https://$server_name$request_uri;
}

server {
    # Uncomment this block when you have SSL certificates
    # listen 443 ssl http2;
    # server_name your-domain.com;
    
    # SSL Configuration (uncomment and configure)
    # ssl_certificate /etc/letsencrypt/live/your-domain.com/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/your-domain.com/privkey.pem;
    # ssl_protocols TLSv1.2 TLSv1.3;
    # ssl_ciphers HIGH:!aNULL:!MD5;
    
    # For development without SSL
    listen 80;
    server_name localhost;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Client body size limit for file uploads
    client_max_body_size 100M;
    
    # Timeouts for long-running operations (Ora2Pg exports, AI corrections)
    proxy_connect_timeout 600s;
    proxy_send_timeout 600s;
    proxy_read_timeout 600s;
    
    # Main application
    location / {
        proxy_pass http://ora2pg_app;
        
        # IMPORTANT: Add your auth token here
        # Get the token from Docker logs or /app/data/.auth_token
        proxy_set_header X-Auth-Token YOUR_TOKEN_HERE;
        
        # Standard proxy headers
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # WebSocket support (if needed in future)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }
    
    # Health check endpoint (no auth token needed if ALLOW_LOCALHOST_BYPASS=true)
    location /health {
        proxy_pass http://ora2pg_app/health;
        proxy_set_header Host $host;
        access_log off;  # Don't log health checks
    }
    
    # Static files (optional: serve directly from nginx for better performance)
    # location /static/ {
    #     alias /path/to/app/static/;
    #     expires 30d;
    #     add_header Cache-Control "public, immutable";
    # }
    
    # Access restrictions (optional)
    # allow 192.168.1.0/24;  # Allow local network
    # allow 10.0.0.0/8;      # Allow internal network
    # deny all;              # Deny everyone else
}

# Optional: Rate limiting
limit_req_zone $binary_remote_addr zone=ora2pg_limit:10m rate=10r/s;

server {
    # ... (in the server block above)
    
    location /api/ {
        limit_req zone=ora2pg_limit burst=20 nodelay;
        
        proxy_pass http://ora2pg_app;
        proxy_set_header X-Auth-Token YOUR_TOKEN_HERE;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    }
}
