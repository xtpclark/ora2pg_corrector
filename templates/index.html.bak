<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ora2Pg AI Corrector - Workspace</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/monaco-editor@0.33.0/min/vs/loader.js"></script>
    <style>
        body { font-family: 'Inter', sans-serif; }
        .sidebar { width: 280px; }
        .sidebar-item.active { background-color: #4a5568; }
        .tab-button.active { border-color: #4299e1; color: #4299e1; }
        .editor-container { height: 55vh; }
        .form-input {
            background-color: #374151;
            border: 1px solid #4b5563;
            color: #d1d5db;
        }
        .toast {
            position: fixed;
            bottom: 1.5rem;
            right: 1.5rem;
            z-index: 50;
            transition: all 0.5s ease-in-out;
            opacity: 0;
            transform: translateY(20px);
        }
        .toast.show {
            opacity: 1;
            transform: translateY(0);
        }
    </style>
</head>
<body class="bg-gray-800 text-gray-200 flex h-screen overflow-hidden">

    <!-- Sidebar -->
    <aside class="sidebar bg-gray-900 p-6 flex flex-col flex-shrink-0">
        <h1 class="text-2xl font-bold text-white mb-8">Ora2Pg Corrector</h1>
        <h2 class="text-sm font-semibold text-gray-400 uppercase tracking-wider mb-3">Clients</h2>
        <div id="client-list" class="space-y-2 overflow-y-auto">
            <!-- Client items will be dynamically inserted here -->
        </div>
        <button id="add-client-btn" class="mt-4 w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg flex items-center justify-center">
            <i class="fas fa-plus mr-2"></i> New Client
        </button>
        <div class="mt-auto text-center text-gray-500 text-xs">
            Version 2.3
        </div>
    </aside>

    <!-- Main Content -->
    <main class="flex-1 p-8 overflow-y-auto">
        <div id="main-content" class="hidden">
            <h1 class="text-3xl font-bold text-white mb-4" id="client-name-header"></h1>
            
            <div class="border-b border-gray-700 mb-6">
                <nav class="flex space-x-6" id="main-tabs">
                    <button data-tab="workspace" class="tab-button active text-gray-400 hover:text-white py-3 px-1 border-b-2 font-medium">Workspace</button>
                    <button data-tab="settings" class="tab-button text-gray-400 hover:text-white py-3 px-1 border-b-2 border-transparent font-medium">Settings</button>
                    <button data-tab="audit" class="tab-button text-gray-400 hover:text-white py-3 px-1 border-b-2 border-transparent font-medium">Audit Log</button>
                </nav>
            </div>

            <div id="tab-content">
                <div id="workspace-tab" class="tab-pane">
                    <div class="bg-gray-900 p-6 rounded-lg">
                        <div class="flex items-center space-x-4 mb-6">
                            <input type="file" id="sql-file-picker" class="hidden" accept=".sql,text/plain">
                            <button id="load-file-proxy-btn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-6 rounded-lg flex items-center">
                                <i class="fas fa-folder-open mr-2"></i> Load SQL File
                            </button>
                        </div>
                        <div class="grid grid-cols-2 gap-6">
                            <div>
                                <h3 class="text-lg font-semibold mb-3">Original SQL</h3>
                                <div id="original-editor" class="editor-container rounded-lg overflow-hidden"></div>
                            </div>
                            <div>
                                <h3 class="text-lg font-semibold mb-3">Corrected PostgreSQL</h3>
                                <div id="corrected-editor" class="editor-container rounded-lg overflow-hidden"></div>
                            </div>
                        </div>
                         <div class="mt-6 flex justify-between items-center">
                             <button id="correct-ai-btn" class="bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-6 rounded-lg flex items-center">
                                <i class="fas fa-magic mr-2"></i> Correct with AI
                            </button>
                            <div class="space-x-4">
                                <button id="validate-btn" class="bg-gray-600 hover:bg-gray-700 text-white font-bold py-2 px-6 rounded-lg">Validate</button>
                                <button id="save-btn" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-lg">Save</button>
                            </div>
                        </div>
                    </div>
                </div>

                <div id="settings-tab" class="tab-pane hidden">
                     <form id="settings-form" class="bg-gray-900 p-6 rounded-lg space-y-8">
                        <div id="ai-settings-container">
                            <h3 class="text-xl font-semibold mb-4 border-b border-gray-700 pb-2">AI Provider Settings</h3>
                        </div>
                        <div id="ora2pg-settings-container">
                            <h3 class="text-xl font-semibold mb-4 border-b border-gray-700 pb-2">Ora2Pg Settings</h3>
                        </div>
                         <div id="validation-settings-container">
                            <h3 class="text-xl font-semibold mb-4 border-b border-gray-700 pb-2">Validation Database</h3>
                             <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label for="validation_pg_dsn" class="block text-sm font-medium text-gray-300 mb-1">PostgreSQL DSN</label>
                                    <input type="text" name="validation_pg_dsn" id="validation_pg_dsn" class="form-input w-full rounded-md" placeholder="postgresql://user:pass@host:port/dbname">
                                </div>
                            </div>
                        </div>
                        <div class="flex justify-end">
                            <button type="submit" class="bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-6 rounded-lg">Save Settings</button>
                        </div>
                    </form>
                </div>

                <div id="audit-tab" class="tab-pane hidden">
                    <div class="bg-gray-900 p-6 rounded-lg">
                        <h3 class="text-xl font-semibold mb-4">Action History</h3>
                        <div class="overflow-y-auto" style="max-height: 65vh;">
                            <table class="min-w-full divide-y divide-gray-700">
                                <thead class="bg-gray-800 sticky top-0">
                                    <tr>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Timestamp</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Action</th>
                                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-400 uppercase tracking-wider">Details</th>
                                    </tr>
                                </thead>
                                <tbody id="audit-log-body" class="bg-gray-900 divide-y divide-gray-700">
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div id="welcome-message" class="flex items-center justify-center h-full w-full">
            <div class="text-center">
                <i class="fas fa-wave-square text-5xl text-gray-600 mb-4"></i>
                <h2 class="text-2xl text-gray-400">Select a client to get started</h2>
                <p class="text-gray-500">or create a new one</p>
            </div>
        </div>
    </main>

    <!-- Toast Notification -->
    <div id="toast" class="toast bg-gray-700 border border-gray-600 text-white py-3 px-5 rounded-lg shadow-lg">
        <p id="toast-message"></p>
    </div>

    <script>
        // Monaco Editor Loader
        let originalEditor, correctedEditor;
        require.config({ paths: { 'vs': 'https://cdn.jsdelivr.net/npm/monaco-editor@0.33.0/min/vs' }});
        window.MonacoEnvironment = { getWorkerUrl: () => `./vs/base/worker/workerMain.js` };
        require(['vs/editor/editor.main'], function() {
            originalEditor = monaco.editor.create(document.getElementById('original-editor'), {
                value: '-- Oracle SQL will appear here...',
                language: 'sql',
                theme: 'vs-dark',
                readOnly: false,
                automaticLayout: true
            });
            correctedEditor = monaco.editor.create(document.getElementById('corrected-editor'), {
                value: '-- AI-corrected PostgreSQL will appear here...',
                language: 'sql',
                theme: 'vs-dark',
                automaticLayout: true
            });
        });

        // App Logic
        document.addEventListener('DOMContentLoaded', () => {
            let currentClientId = null;
            let clients = [];
            let aiProviders = [];
            let ora2pgOptions = [];
            let appSettings = {}; // To store global settings

            // DOM Elements
            const clientListEl = document.getElementById('client-list');
            const mainContentEl = document.getElementById('main-content');
            const welcomeMessageEl = document.getElementById('welcome-message');
            const clientNameHeaderEl = document.getElementById('client-name-header');
            const tabsEl = document.getElementById('main-tabs');
            const settingsForm = document.getElementById('settings-form');
            const filePicker = document.getElementById('sql-file-picker');
            const loadFileProxyBtn = document.getElementById('load-file-proxy-btn');
            
            // --- Helper Functions ---
            function showToast(message, isError = false) {
                const toast = document.getElementById('toast');
                const toastMessage = document.getElementById('toast-message');
                toastMessage.textContent = message;
                toast.className = `toast ${isError ? 'bg-red-600' : 'bg-green-600'} border-transparent text-white py-3 px-5 rounded-lg shadow-lg`;
                toast.classList.add('show');
                setTimeout(() => toast.classList.remove('show'), 3000);
            }

            async function apiFetch(url, options = {}) {
                try {
                    const response = await fetch(url, options);
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.error || `HTTP error! status: ${response.status}`);
                    }
                    return response.json();
                } catch (error) {
                    showToast(error.message, true);
                    console.error('API Fetch Error:', error);
                    throw error;
                }
            }
            
            // --- UI Rendering ---
            function renderClients() {
                clientListEl.innerHTML = '';
                clients.forEach(client => {
                    const clientItem = document.createElement('a');
                    clientItem.href = '#';
                    clientItem.className = 'sidebar-item block text-gray-300 hover:bg-gray-700 hover:text-white rounded-md px-3 py-2 text-sm font-medium';
                    clientItem.textContent = client.client_name;
                    clientItem.dataset.clientId = client.client_id;
                    if (client.client_id === currentClientId) {
                        clientItem.classList.add('active');
                    }
                    clientListEl.appendChild(clientItem);
                });
            }

            function switchTab(tabName) {
                document.querySelectorAll('.tab-button').forEach(btn => btn.classList.toggle('active', btn.dataset.tab === tabName));
                document.querySelectorAll('#tab-content .tab-pane').forEach(pane => pane.classList.toggle('hidden', pane.id !== `${tabName}-tab`));
                if (tabName === 'audit') fetchAndRenderAuditLogs();
            }

            function renderSettingsForms(config) {
                const aiContainer = document.getElementById('ai-settings-container');
                aiContainer.innerHTML = '<h3 class="text-xl font-semibold mb-4 border-b border-gray-700 pb-2">AI Provider Settings</h3>';
                let providerOptionsHtml = aiProviders.map(p => `<option value="${p.name}" ${config.ai_provider === p.name ? 'selected' : ''}>${p.name}</option>`).join('');
                aiContainer.insertAdjacentHTML('beforeend', `
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label for="ai_provider" class="block text-sm font-medium text-gray-300 mb-1">AI Provider</label>
                            <select name="ai_provider" id="ai_provider" class="form-input w-full rounded-md">${providerOptionsHtml}</select>
                        </div>
                        <div>
                            <label for="ai_model" class="block text-sm font-medium text-gray-300 mb-1">AI Model</label>
                            <input type="text" name="ai_model" id="ai_model" class="form-input w-full rounded-md" value="${config.ai_model || ''}">
                        </div>
                         <div>
                            <label for="ai_api_key" class="block text-sm font-medium text-gray-300 mb-1">AI API Key</label>
                            <input type="password" name="ai_api_key" id="ai_api_key" class="form-input w-full rounded-md" value="${config.ai_api_key || ''}">
                        </div>
                        <div>
                            <label for="ai_endpoint" class="block text-sm font-medium text-gray-300 mb-1">AI Endpoint</label>
                            <input type="text" name="ai_endpoint" id="ai_endpoint" class="form-input w-full rounded-md" value="${config.ai_endpoint || ''}">
                        </div>
                    </div>
                `);

                const ora2pgContainer = document.getElementById('ora2pg-settings-container');
                ora2pgContainer.innerHTML = '<h3 class="text-xl font-semibold mb-4 border-b border-gray-700 pb-2">Ora2Pg Settings</h3>';
                const ora2pgGrid = document.createElement('div');
                ora2pgGrid.className = 'grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6';
                ora2pgOptions.forEach(option => {
                    const key = option.option_name.toLowerCase();
                    const value = config[key] ?? option.default_value;
                    let inputHtml = '';
                    if (option.option_type === 'checkbox') {
                        inputHtml = `<input type="checkbox" name="${key}" class="form-input rounded mt-1" ${value ? 'checked' : ''}>`;
                    } else {
                         inputHtml = `<input type="text" name="${key}" class="form-input w-full rounded-md" value="${value || ''}">`;
                    }
                    ora2pgGrid.innerHTML += `
                        <div>
                            <label for="${key}" class="block text-sm font-medium text-gray-300 mb-1">${option.description}</label>
                            ${inputHtml}
                        </div>`;
                });
                ora2pgContainer.appendChild(ora2pgGrid);
                
                document.getElementById('validation_pg_dsn').value = config.validation_pg_dsn || appSettings.staging_pg_dsn || '';
            }

            async function fetchAndRenderAuditLogs() {
                if (!currentClientId) return;
                const logs = await apiFetch(`/api/client/${currentClientId}/audit_logs`);
                const tbody = document.getElementById('audit-log-body');
                tbody.innerHTML = '';
                if (logs.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="3" class="text-center py-4 text-gray-500">No audit history for this client.</td></tr>';
                    return;
                }
                logs.forEach(log => {
                    const row = `
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-400">${new Date(log.timestamp).toLocaleString()}</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-300">${log.action}</td>
                            <td class="px-6 py-4 whitespace-normal text-sm text-gray-400">${log.details}</td>
                        </tr>`;
                    tbody.innerHTML += row;
                });
            }

            // --- Event Handlers & Business Logic ---
            async function selectClient(clientId) {
                if (!clientId) {
                    mainContentEl.classList.add('hidden');
                    welcomeMessageEl.classList.remove('hidden');
                    currentClientId = null;
                    return;
                }
                currentClientId = clientId;
                const selectedClient = clients.find(c => c.client_id === clientId);
                clientNameHeaderEl.textContent = selectedClient.client_name;
                
                renderClients();
                mainContentEl.classList.remove('hidden');
                welcomeMessageEl.classList.add('hidden');
                switchTab('workspace');

                const config = await apiFetch(`/api/client/${currentClientId}/config`);
                renderSettingsForms(config);
                originalEditor.setValue('-- Oracle SQL will appear here...');
                correctedEditor.setValue('-- AI-corrected PostgreSQL will appear here...');
            }

            function handleFileSelect(event) {
                const file = event.target.files[0];
                if (!file) {
                    return;
                }
                const reader = new FileReader();
                reader.onload = function(e) {
                    const content = e.target.result;
                    originalEditor.setValue(content);
                    showToast(`Loaded ${file.name} successfully.`);
                    log_audit(currentClientId, 'load_sql_file', `Loaded SQL from file: ${file.name}`)
                    event.target.value = ''; // Allow loading the same file again
                };
                reader.onerror = function() {
                    showToast('Failed to read the file.', true);
                };
                reader.readAsText(file);
            }
            
            async function handleCorrectWithAI() {
                if (!currentClientId) return;
                const originalSql = originalEditor.getValue();
                if (!originalSql || originalSql.trim() === '' || originalSql.startsWith('-- Oracle SQL')) {
                    showToast('No original SQL to correct.', true);
                    return;
                }
                showToast('AI correction in progress...');
                const data = await apiFetch(`/api/correct_sql`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ sql: originalSql, client_id: currentClientId })
                });
                correctedEditor.setValue(data.corrected_sql || '');
                showToast(`AI correction complete. Tokens used: ${data.metrics.tokens_used}`);
            }

            async function handleValidateSql() {
                if (!currentClientId) return;
                const correctedSql = correctedEditor.getValue();
                if (!correctedSql || correctedSql.trim() === '' || correctedSql.startsWith('-- AI-corrected')) {
                    showToast('No corrected SQL to validate.', true);
                    return;
                }
                const data = await apiFetch(`/api/validate`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ sql: correctedSql, client_id: currentClientId })
                });
                showToast(data.message, data.status !== 'success');
            }

            async function handleSaveSql() {
                if (!currentClientId) return;
                const originalSql = originalEditor.getValue();
                const correctedSql = correctedEditor.getValue();
                const data = await apiFetch(`/api/save`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ original_sql: originalSql, corrected_sql: correctedSql, client_id: currentClientId })
                });
                showToast(data.message);
            }
            
            async function handleSaveSettings(e) {
                e.preventDefault();
                if (!currentClientId) return;
                const formData = new FormData(settingsForm);
                const config = {};
                for (let [key, value] of formData.entries()) {
                    const input = settingsForm.querySelector(`[name="${key}"]`);
                    if (input.type === 'checkbox') {
                        config[key] = input.checked;
                    } else {
                        config[key] = value;
                    }
                }
                await apiFetch(`/api/client/${currentClientId}/config`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(config)
                });
                showToast('Settings saved successfully.');
            }

            async function handleAddClient() {
                const clientName = prompt('Enter the new client name:');
                if (clientName && clientName.trim()) {
                    const newClient = await apiFetch('/api/clients', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ client_name: clientName.trim() })
                    });
                    clients.push(newClient);
                    clients.sort((a, b) => a.client_name.localeCompare(b.client_name));
                    selectClient(newClient.client_id);
                }
            }

             async function log_audit(clientId, action, details) {
                if (!clientId) return;
                try {
                    await apiFetch(`/api/client/${clientId}/log_audit`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ action, details })
                    });
                } catch (error) {
                    console.error("Failed to log audit event:", error);
                }
            }

            // --- Initialization ---
            async function initializeApp() {
                const results = await Promise.all([
                    apiFetch('/api/clients'),
                    apiFetch('/api/ai_providers'),
                    apiFetch('/api/ora2pg_config_options'),
                    apiFetch('/api/app_settings')
                ]);
                clients = results[0];
                aiProviders = results[1];
                ora2pgOptions = results[2];
                appSettings = results[3];
                renderClients();
            }

            // Event Listeners
            clientListEl.addEventListener('click', e => {
                if (e.target && e.target.matches('.sidebar-item')) {
                    e.preventDefault();
                    selectClient(parseInt(e.target.dataset.clientId));
                }
            });
            tabsEl.addEventListener('click', e => {
                if (e.target && e.target.matches('.tab-button')) {
                    switchTab(e.target.dataset.tab);
                }
            });
            document.getElementById('add-client-btn').addEventListener('click', handleAddClient);
            loadFileProxyBtn.addEventListener('click', () => filePicker.click());
            filePicker.addEventListener('change', handleFileSelect);
            document.getElementById('correct-ai-btn').addEventListener('click', handleCorrectWithAI);
            document.getElementById('validate-btn').addEventListener('click', handleValidateSql);
            document.getElementById('save-btn').addEventListener('click', handleSaveSql);
            settingsForm.addEventListener('submit', handleSaveSettings);

            initializeApp();
        });
    </script>
</body>
</html>

