# Docker Environment Configuration
# Copy this to .env for Docker deployment

# --- Application Configuration ---
APP_SECRET_KEY=b374df1b11091485c805007bdcc6aa6815e2ba9590c58d12bac7570ac06e07f0
APP_ENCRYPTION_KEY=-EYQlUn2pJGaPWFfBbvpUpPNfABU_3jRJUR0C7Xia0U=

# --- Authentication Configuration ---
# AUTH_MODE options: none, token
# - none: No authentication (not recommended for network deployment)
# - token: Token-based authentication (recommended)
AUTH_MODE=token

# Optional: Set a specific token (otherwise auto-generated)
# ACCESS_TOKEN=your-secure-token-here

# Container environment flag
CONTAINER_ENV=docker

# Allow localhost to bypass auth (useful for health checks)
# ALLOW_LOCALHOST_BYPASS=false

# --- Database Configuration ---
DB_BACKEND=sqlite

# If using PostgreSQL backend
#DB_BACKEND=postgresql
#PG_DSN_CONFIG="dbname=ora2pg_settings user=postgres password=password host=postgres port=5432"

# Validation database for testing converted SQL
VALIDATION_PG_DSN="dbname=staging user=postgres password=password host=postgres port=5432"

# --- Docker Compose Postgres Service ---
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password
POSTGRES_DB=ora2pg_settings

# --- AI Provider API Keys ---
GEMINI_API_KEY=
OPENAI_API_KEY=

# --- Output Configuration ---
OUTPUT_DIR=/app/project_output
HOST_UID=1000
HOST_GID=1000

# --- Flask Configuration ---
FLASK_ENV=production
PORT=8000
