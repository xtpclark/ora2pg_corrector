#This is an example file. Copy it to .env and fill in your actual values.
#IMPORTANT: Do not commit the .env file to your version control system.

#--- Application Configuration ---
#Generate a strong, random secret key for signing JWTs.
#You can generate one with: python -c 'import secrets; print(secrets.token_hex(32))'

APP_SECRET_KEY=
#Generate a Fernet key for encrypting sensitive data in the database.
#You can generate one with: python -c 'from cryptography.fernet import Fernet; print(Fernet.generate_key().decode())'

APP_ENCRYPTION_KEY=

#--- Dummy User for Development Login ---
#Replace with a real user management system in production

DUMMY_USER=admin
DUMMY_PASSWORD=password

#--- Database Configuration ---
#Set the database backend. Options: 'sqlite' or 'postgresql'

DB_BACKEND=sqlite
#If using postgresql, provide the DSN for the application's config database.
#The hostname 'postgres' matches the service name in docker-compose.yml.

#PG_DSN_CONFIG="dbname=ora2pg_settings user=postgres password=password host=postgres port=5432"
#DSN for the staging PostgreSQL database used for validating corrected SQL.
#This can be the same database or a different one.

VALIDATION_PG_DSN="dbname=staging user=postgres password=password host=postgres port=5432"
#--- Docker Compose Postgres Service Configuration ---
#These are used by docker-compose.yml to initialize the postgres service.

#POSTGRES_USER=postgres
#POSTGRES_PASSWORD=password
#POSTGRES_DB=ora2pg_settings

#--- AI Provider API Keys ---
#Provide the API key for your chosen AI service.
#Only one is needed, based on your configuration.

GEMINI_API_KEY=
OPENAI_API_KEY=

OUTPUT_DIR=/app/project_output
HOST_UID=1000
HOST_GID=1000
